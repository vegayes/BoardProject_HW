package edu.kh.project.myPage.controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.SessionAttribute;
import org.springframework.web.bind.annotation.SessionAttributes;
import org.springframework.web.bind.support.SessionStatus;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import edu.kh.project.member.model.dto.Member;
import edu.kh.project.myPage.model.service.MyPageService;

@SessionAttributes({"loginMember"})
// 1) Model에 세팅된 값의 key와 {} 작성된 값이 일치하면 session scope로 이동
// 2) Session으로 올려둔 값을 해당 클래스에서 얻어와 사용 가능하게함
//	-> @SessionAttribute(key)로 사용
@RequestMapping("/myPage")
@Controller
public class MyPageController {
	
	@Autowired
	private MyPageService service;
	
	@Autowired // bean으로 등록된 객체 중 타입이 일치하는 객체를 DI
	private BCryptPasswordEncoder bcrypt;

	
	
	// 내 정보 페이지로 이동
	@GetMapping("/info")
	public String info() {
		return "myPage/myPage-info";
	}
	
	// 프로필 페이지 이동
	@GetMapping("/profile")
	public String profile() {
		return "myPage/myPage-profile";
	}
	
	
	// 비밀번호 변경 페이지 이동
	@GetMapping("/changePw")
	public String changePw() {
		return "myPage/myPage-changePw";
	}
	
	// 탈퇴 페이지 이동
	@GetMapping("/secession")
	public String secession() {
		return "myPage/myPage-secession";
	}
	
	
	// 회원 정보 수정
	@PostMapping("/info")
	public String updateInfo(@SessionAttribute("loginMember") Member loginMember,
							Member updateMember,
							String[] memberAddress,
							RedirectAttributes ra) {
		
		/*
		 * @SessionAttribute("loginMember") Member loginMember
		 *  : Session에서 얻어온 "loginMember"에 해당하는 객체를
		 *    매개변수 Member loginMember에 저장
		 * 
		 * Member updateMember
		 * : 수정할 닉네임, 전화번호 담긴 커맨드 객체
		 * 
		 * 
		 * String[] memberAddress 
		 * : name="memberAddress"인 input 3개의 값(주소)
		 * 
		 * 
		 * RedirectAttributes ra : 리다이렉트 시 값 전달용 객체
		 * 
		 * */
		
		
		// 주소 하나로 합치자 (a^^^b^^^c)
		if(updateMember.getMemberAddress().equals(",,")) {
			updateMember.setMemberAddress(null);
		}else {
			// updateMember 에 주소문자열 세팅
			String addr = String.join("^^^", memberAddress);
			updateMember.setMemberAddress(addr);
		}
		
		// 로그인한 회원의 번호를 updateMember에 세팅
		updateMember.setMemberNo( loginMember.getMemberNo() );
		
		
		// DB 회원 정보 수정 (update) 서비스 호출
		int result = service.updateInfo(updateMember);
		
		String message = null;
		
		// 결과값으로 성공
		if(result > 0) {
			// -> 성공 시 Session에 로그인된 회원 정보도 수정(동기화)
			loginMember.setMemberNickname( updateMember.getMemberNickname() );
			loginMember.setMemberTel( updateMember.getMemberTel() );
			loginMember.setMemberAddress( updateMember.getMemberAddress() );
			
			message = "회원 정보 수정 성공";
			
			
		} else {
			// 실패에 따른 처리 

			message = "회원 정보 수정 실패";
			
		}
		
		ra.addFlashAttribute("message", message);
		
		return "redirect:info"; // 상대경로 (/myPage/info)
	}
	
	
	/* MultipartFile : input type="file"로 제출된 파일을 저장한 객체
	 * 
	 * [ 제공하는 메서드 ]
	 * - transferTo() : 파일을 지정된 경로에 저장(메모리 -> HDD/SSD) 
	 * - getOriginalFileName() : 파일 원본명
	 * - getSize() : 파일 크기
	 * 
	 * 
	 * */
	
	
	
	// 프로필 이미지 수정
	@PostMapping("/profile")
	public String updateProfile(
			@RequestParam("profileImage") MultipartFile profileImage // 업로드 파일
			, HttpSession session // 세션 객체
			, @SessionAttribute("loginMember") Member loginMember
			, RedirectAttributes ra // 리다이렉 시 메세지 전달
			) throws Exception{
		
		// 웹 접근 경로
		String webPath = "/resources/images/member/";
		
		// 실제로 이미지 파일이 저장되어야하는 서버컴퓨터 경로
		String filePath = session.getServletContext().getRealPath(webPath);
		// C:\workspace\6_Framework\boardProject\src\main\webapp\resources\images\member
		
		
		// 프로필 이미지 수정 서비스 호출
		int result = service.updateProfile(profileImage, webPath, filePath, loginMember);
		
		
		String message = null;
		if(result > 0) message = "프로필 이미지가 변경되었습니다";
		else			message = "프로필 변경 실패";
		
		ra.addFlashAttribute("message", message);
		
		return "redirect:profile";
	}
	
	// 비밀번호 변경
	@PostMapping("/changePw")
	public String updatePw(@SessionAttribute("loginMember") Member loginMember,
							String currentPw, String newPw, String newPwConfirm) {
		
		System.out.println("비밀번호 변경 : " + currentPw);
		System.out.println("비밀번호 변경 new : " + newPw);
		System.out.println("비밀번호 변경 확인: " + newPwConfirm);
		
		currentPw = bcrypt.encode(currentPw);
		
		System.out.println("현재 pw : " + currentPw);
		System.out.println("로그인된 pw : " + loginMember.getMemberPw());
		
		
//		int result = service.updatePw(currentPw, newPw);
		
		
		return "redirect:changePw";
	}
	
	
	
	
//	@PostMapping("/secession")
//	public String memberSecession(@SessionAttribute("loginMember") Member loginMember,
//								  String memberPw) {
//		// 1) 로그인된 회원과 비밀번호가 일치하는지 확인
//		// 근데, 로그인했을 때, session에서 비밀번호를 지워놨기 때문에 
//		// 새로 가져와야 함.?
//		
//		String pw = service.pwCheck(loginMember);
//		
//		System.out.println("가져온 pw : "+ pw);
//
////		System.out.println("현재 비밀번호 pw : " + pw + "\n 다음 비밀번호 pw : " + memberPw);
//		
//		if(bcrypt.matches(pw, memberPw)) {
//			
//			System.out.println("같음");
//		}else {
//			System.out.println("다름");
//		}
////		int result = service.updatePw(currentPw, newPw);
//		
//		
//		return "redirect:secession";
//	}
	
	@PostMapping("/secession")
	public String memberSecession(@SessionAttribute("loginMember") Member loginMember, String memberPw,
									SessionStatus status/*HttpSession session*/) {
		
		String path = "redirect:";
	    // DB에서 사용자의 암호화된 비밀번호를 가져옵니다.
		String pw = service.pwCheck(loginMember);
		
	    if (bcrypt.matches(memberPw, pw)) {
	    	
	    	int result = service.memberSecession(loginMember);
	    	
	    	
	    	
	    	
	        System.out.println("비밀번호 일치, 회원 탈퇴 완료");
	        
	        
	        
	        status.setComplete();
	        
	        path += "/";
	        
	    } else {
	        System.out.println("비밀번호 불일치, 회원 탈퇴 실패");
	        
	        path += "/secession";
	    }

	    return path;
	}

	
	
	
	
	
	
	
	
	
	
	
}
